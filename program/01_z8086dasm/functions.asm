; Чтение их памяти по адресу HL++
; _param_ip -- это РЕАЛЬНЫЙ ip, который должен быть сконвертирован
;              на память спектрума
; ----------------------------------------------------------------------

read:       push    hl
            ld      hl, (_param_ip)
            ld      a, (hl)
            inc     hl
            ld      (_param_ip), hl
            pop     hl
            ret

; ----------------------------------------------------------------------
; Вход: B(y=0..23), C(x=0..31) A(символ)
; Печать символа в поток
; ----------------------------------------------------------------------

print_char: push    af
            push    bc
            push    de
            push    hl
            ld      bc, (video_cursor)
            cp      10
            jr      z, .pc2                 ; Код переноса на другую строку
            call    get_symbol_address      ; HL=Адрес символа в памяти
            ex      de, hl                  ; DE теперь тут
            call    get_text_cursor_address ; HL=Адрес видеопамяти
            push    bc
            ld      b, 8                    ; Повторить 8 раз
.pc1:       ld      a, (de)                 ; Прочитать 8 бит
            ld      (hl), a                 ; Записать 8 бит
            inc     h                       ; Y = Y + 1 согласно модели памяти
            inc     de                      ; К следующему байту
            djnz    .pc1                    ; Рисовать 8 строк
            pop     bc
            inc     c                       ; X++
            ld      a, c
            cp      $20
            jr      c, .pc3
.pc2:       ld      c, 0
            inc     b                       ; Y++
.pc3:       ld      (video_cursor), bc
            ; ------------
            ld      hl, _param_cnt
            inc     (hl)
            ; ------------
            pop     hl
            pop     de
            pop     bc
            pop     af
            ret

; ----------------------------------------------------------------------
; A - Цвет
; ----------------------------------------------------------------------
cls:        ld      bc, 0x02FF
            ld      hl, 0x5800  ; Отсюда копировать
            ld      de, 0x5801  ; Сюда
            ld      (hl), a     ; Байт инициализации
            rrca
            rrca
            rrca
            out     (254), a    ; Цвет бордера
            ldir                ; Копировать из (HL) -> (DE), HL++, DE++
            xor     a
            ld      hl, 0x4000
            ld      de, 0x4001
            ld      bc, 0x17FF
            ldir                ; Очистить графическую область
            ret

; ----------------------------------------------------------------------
; Вход:  B(Y=0..23), C(X=0..31)
; Выход: HL(адрес)
; ----------------------------------------------------------------------

get_text_cursor_address:

            ld      a, c
            and     0x1f
            ld      l, a        ; L = X & 31
            ld      a, b
            and     0x07        ; Нужно ограничить 3 битами
            rrca                ; Легче дойти с [0..2] до позиции [5..7]
            rrca                ; Если вращать направо
            rrca                ; ... три раза
            or      l           ; Объединив с 0..4 уже готовыми ранее
            ld      l, a        ; Загрузить новый результат в L
            ld      a, b        ; Т.к. Y[3..5] уже на месте
            and     0x18        ; Его двигать даже не надо
            or      0x40        ; Ставим видеоадрес $4000
            ld      h, a        ; И загружаем результат
            ret

; ----------------------------------------------------------------------
; Вход:  A (символ)
; Выход: HL
; ----------------------------------------------------------------------

get_symbol_address:

            sub     0x20            ; A = Sym - 0x20
            ld      h, 0            ; HL = A
            ld      l, a
            add     hl, hl
            add     hl, hl
            add     hl, hl          ; HL = A << 3
            ld      a, h
            add     0x3d
            ld      h, a            ; HL += 0x3D00
            ret
